from shapely import homography
from shapely.wkt import loads as load_wkt

from . import unittest


class HomographyTestCase(unittest.TestCase):

    def test_homography_params(self):
        g = load_wkt('LINESTRING(2.4 4.1, 2.4 3, 3 3)')
        self.assertRaises(
            TypeError, homography.perspective_transform, g, None)
        self.assertRaises(ValueError, homography.perspective_transform, g,
                          [1, 2, 3, 4, 5, 6, 7, 8, 9])
        self.assertRaises(AttributeError, homography.perspective_transform, None,
                          [1, 2, 3, 4, 5, 6, 7, 8])

    def test_homography_geom_types(self):

        # identity matrices, which should result with no transformation
        matrix2d = (1, 0,
                    0, 1,
                    0, 0,
                    0, 0)

        # empty in, empty out
        empty2d = load_wkt('MULTIPOLYGON EMPTY')
        self.assertTrue(homography.perspective_transform(empty2d, matrix2d).is_empty)

        def test_geom(g2):
            self.assertFalse(g2.has_z)
            a2 = homography.perspective_transform(g2, matrix2d)
            self.assertFalse(a2.has_z)
            self.assertTrue(g2.equals(a2))
            return

        pt2d = load_wkt('POINT(12.3 45.6)')
        test_geom(pt2d)
        ls2d = load_wkt('LINESTRING(0.9 3.4, 0.7 2, 2.5 2.7)')
        test_geom(ls2d)
        lr2d = load_wkt('LINEARRING(0.9 3.4, 0.7 2, 2.5 2.7, 0.9 3.4)')
        test_geom(lr2d)
        test_geom(load_wkt('POLYGON((0.9 2.3, 0.5 1.1, 2.4 0.8, 0.9 2.3), '
                           '(1.1 1.7, 0.9 1.3, 1.4 1.2, 1.1 1.7), '
                           '(1.6 1.3, 1.7 1, 1.9 1.1, 1.6 1.3))'))
        test_geom(load_wkt(
            'MULTIPOINT ((-300 300), (700 300), (-800 -1100), (200 -300))'))
        test_geom(load_wkt(
            'MULTILINESTRING((0 0, -0.7 -0.7, 0.6 -1), '
            '(-0.5 0.5, 0.7 0.6, 0 -0.6))'))
        test_geom(load_wkt(
            'MULTIPOLYGON(((900 4300, -1100 -400, 900 -800, 900 4300)), '
            '((1200 4300, 2300 4400, 1900 1000, 1200 4300)))'))
        test_geom(load_wkt('GEOMETRYCOLLECTION(POINT(20 70),'
                           'POLYGON((60 70, 13 35, 60 -30, 60 70)),'
                           'LINESTRING(60 70, 50 100, 80 100))'))

    def test_perspective_transform(self):
        g = load_wkt('LINESTRING(141 131, 480 159, 493 630, 64 601)')
        # custom scale and translate
        expected2d = load_wkt('LINESTRING(318 256, 534 372, 316 670, 73 473)')
        # the testcase is generated by `cv2.findHomography()`
        matrix2d = (4.34043935e-01, -4.19622184e-01,
                    1.46491654e-01, 4.41418278e-01,
                    -3.62463336e-04, -9.14274844e-05,
                    2.91709494e+02, 1.61369294e+02)
        a2 = homography.perspective_transform(g, matrix2d)
        self.assertTrue(a2.equals_exact(expected2d, 1e-6))
        self.assertFalse(a2.has_z)
